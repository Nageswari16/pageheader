import { Injector } from '@angular/core';
import { BreakpointObserver } from '@angular/cdk/layout';
import { PagesService } from '../@core/service/pages.service';
import { Router } from '@angular/router';
import { Title } from '@angular/platform-browser';
import { BuildTimeService } from '../@core/service/build-time.service';
import { DatePipe } from '@angular/common';
import { LocalService } from '../@core/service/local.service';
import { AlertService } from '../@core/service/alert.service';
import { Subscription } from 'rxjs';
import { DynamicTabPageService } from '../@core/service/dynamic-tab-page-service';
import { DataStoreService } from '../@core/service/data-store.service';
import { PageHeaderService } from '../@core/service/page-header.service';
import * as i0 from "@angular/core";
export declare class HeaderComponent {
    private _router;
    private titleService;
    private buildTimeService;
    private datePipe;
    private _storeservice;
    username: string | null | undefined;
    showname: string | null | undefined;
    dnone: string;
    currentUser: [];
    formList: Array<any>;
    authorizedList: Array<any>;
    wso2ApiManager: string;
    wso2EnterpriseIntegrator: string;
    businessRulesAPI: string;
    pageList: Record<string, unknown>;
    localstorage: LocalService;
    isAdmin: boolean;
    userpage: any;
    isCountyCaseManager: boolean;
    routeToDashboard: string;
    loadCurrentUsers: boolean;
    alertService: AlertService;
    pageHeaderService: PageHeaderService;
    orgSubs: Subscription;
    orgId: any;
    dynamicTabPageService: DynamicTabPageService;
    landingPage: any;
    currentPage: any;
    currentSubmenuPage: any;
    buildVersion: string;
    buildTimestamp: any;
    buildNumber: string;
    localTime: any;
    pagesservice: PagesService;
    breakpointObserver: BreakpointObserver;
    environment: any;
    authService: any;
    appService: any;
    isMenuOpen: boolean;
    constructor(injector: Injector, _router: Router, titleService: Title, buildTimeService: BuildTimeService, datePipe: DatePipe, _storeservice: DataStoreService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    getAuthMe(): void;
    getUserDetails(): Promise<void>;
    conditionPageName(defaultpageName: any): void;
    routerNavigator(route: any, pageInfo: any, subMenuInfo: any, event: Event): void;
    checkParams(element: any): any;
    routerDynamicNavigate(page: any, pageInfo: any): void;
    onLoggedout(): void;
    getCustomPage(page: any): any;
    getAuthorizedPages(): any;
    checkDynamicPagePermission(pageId: any): Promise<void>;
    showsubmenu(_$event: any): void;
    getPageImagedata(page: any): any;
    getMenuActive(): void;
    toggleMenu(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<HeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<HeaderComponent, "lib-header", never, {}, {}, never, never, false, never>;
}
